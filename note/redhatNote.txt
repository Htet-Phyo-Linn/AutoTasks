###Read First###
If you want to find specific commands, you can use the "grep" command.
I also frequently use it for various purposes.




#redhat academy link
https://rha.ole.redhat.com/rha/app/

#account 
Workstation -> student -> student


###cmd list###
passwd
whoami
;


#date
[user@host ~]$ date
Sun Feb 27 08:32:42 PM EST 2022
[user@host ~]$ date +%R
20:33
[user@host ~]$ date +%x
02/27/2022

file /etc/passwd = check file type
cat /etc/passwd = display content from file 
head /etc/passwd = first 10 lines or ....
tail -n 3 /etc/passwd = last 10 lines or

wc /etc/passwd = word count
wc -l /etc/passwd ; wc -l /etc/group
wc -c /etc/group /etc/hosts

head -n 3 \
/usr/share/dict/words \
/usr/share/dict/linux.words

!ls = previous cmd
!26

pwd = show file path 
touch = create new file
ls -lR = show all the file list including sub folder
rm -ri = asked y or no
sleep

jobs = show all file list 
fg %jobNumber = bring the process to foreground 
bg %jobNumber = running the suspended job
kill -9 name or processID
uptime = display current load
lscpu




#output file
cat vim_cmd.txt | grep "undo" > undo.txt = one line insert or only ouput overwrite
cat vim_cmd.txt | grep "undo" >> undo.txt = multiple line insert or append


#pip line 
| = redirect to the file


#find errors message
find /etc -name passwd 2> /tmp/errors


#add output to file
tee = command
ls -l | tee list | less


#variable expansion
[user@host ~]$ USERNAME=operator
[user@host ~]$ echo ${USERNAME}
operator


#command subsitution
[user@host glob]$ echo Today is $(date +%A).


#protecting arguments
[user@host glob]$ myhost=$(hostname -s); echo $myhost
host


#Control Specific Processes
pgrep
pkill -9 name


#see process status
top
ps = CMD
ps aux
ps lax
ps -ef



###User Account###

su - username = switch user account
sudo -i = enter root account and root directory
 

#enter root account and current directory
sudo su

#change user password
passwd = user account
passwd user01 = another account

#create user account
useradd user01

#user delete 
userdel -r username



###user group

groupadd -g 10000 group01 = create group with GID
groupadd -r group02 = create system group
groupmod -n group0022 group02 = existing group to change
groupmod -g 20000 group0022 = system to normal


id user02 = check the user id
usermod -g group01 user02 = change user02 default group to group01
usermod -aG group01 user03 = add user to supplementary group(two groups)


newgrp group01 = temporarily change the primary group




#Create the consultant1, consultant2, and consultant3 users with the consultants group as their supplementary group.

useradd -G consultants consultant1
useradd -G consultants consultant2
useradd -G consultants consultant3

tail /etc/group = check group

sudo groupadd groupName = group add
sudo groupdel groupName = group delete




###Configure password

[root@host ~]# chage -m 0 -M 90 -W 7 -I 14 sysadmin05 -->> minimum age (-m) of zero days, a maximum age (-M) of 90 days, a warning period (-W) of 7 days, and an inactivity period (-I) of 14 days.

chage -M 90 operator1 = Maximum 90days
chage -l operator1 = see detail of timeline
chage -d 0 operator1 = force change on first login 




###Restrict Access

usermod -L sysadmin03 = Lock user account
usermod -L -e 2022-08-14 cloudadmin10 = Lock user account and expired account
usermod -U sysadmin03 = unlock user account 
chage -E 2022-06-08 consultant1 = set expiry date

for research = nologin shell






##permission
r = read
w = write
x = execute
X = special execute

u = user
g = group
o =	other
a = all

+ = add 
- = remove
= = set exactly

#cmd 
chmod +x = add execute

start = 0
read = 4
write = 2
execute = 1

r+w+x = 7
4+2+1 = 7 (all permission)
4+2+0 = 6 (read and write)
4+0+0 = 4 (read)


##change owner
chown
chown -R student Pictures = -R entire dictionary tree
chown :admins Pictures = give permission to admin
chown visitor:guests Pictures = owner:group syntax
chown user:groupName filename = change group name




###Setting Special Permissions
Symbolic : setuid = u+s; setgid = g+s; sticky = o+t

Octal : In the added fourth preceding digit;
setuid = 4;
setgid = 2;
sticky = 1;

umask = show current permission





###Control service and daemon

start, stop, restart, status, mask, unmask reload, enable, disable, 

systemctl list-units --type=service = show all the service 

systemctl list-unit-files --type=service = to see the state of all the installed unit files

--type=socket

systemctl status sshd.service = view service status

systemctl is-active sshd.service = verify 
systemctl is-enabled sshd.service

systemctl list-dependencies sshd.service 

systemctl enable sshd.service = start at boot
enable --now 




###ssh
ssh username@server 
w = displays a list of users that are currently logged in to the system

Server = /etc/ssh/ssh_known_hosts

User = ~/.ssh/known_hosts

ssh-keygen = generating private and public key
ssh-keygen -f .ssh/key-with-pass = specific file name

ssh-copy-id -i .ssh/key-with-pass.pub user@remotehost = copy public key to remote system

eval $(ssh-agent) = Start ssh agent and set environment variable 

ssh-add privateFile = default private key file to access account 

w --from = user status






#ssh key
cat ~/.ssh/known_hosts
output -->> server1 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOmiLKMExRnsS1g7OTxMsOmgHuUSGQBUxHhuUGcv19uT

First field = host or ip
Second field = encryption algorithm
Third field = public key







###short form
PID = unique process ID
PPID = The parent's process ID


###user password

cat /etc/shadow
user03 : Name of the user account.

$6$CSsXsd3rwghsdfarf : The cryptographically hashed password of the user.

17933 : The days from the epoch when the password was last changed, where the epoch is 1970-01-01 in the UTC time zone.

0 : The minimum days since the last password change before the user can change it again.

99999 : The maximum days without a password change before the password expires. An empty field means that the password never expires.

7 : The number of days ahead to warn the user that their password will expire.

2 : The number of days without activity, starting with the day that the password expired, before the account is automatically locked.

18113 : The day when the account expires in days since the epoch. An empty field means that the account never expires.

The last field is typically empty and is reserved for future use.






#practice 
Press the Alt+F2 key combination to open the Enter a Command and enter gnome-terminal.

Change password -> student to 55TurnK3y -> using passwd

Alt+. key combination 

Finish

On the workstation machine, change to the student user home directory and use the lab command to complete this exercise. This step is important to ensure that resources from previous exercises do not impact upcoming exercises -> student@workstation ~]$ lab finish cli-desktop




#login
[student@workstation ~]$ lab start cli-desktop




#switch between tty
Ctrl+Alt and a function key (F1 through F6)




#ssh related 
[user@host ~]$ ssh remoteuser@remotehost
remoteuser@remotehost's password: password
[remoteuser@remotehost ~]$

user@host ~]$ ssh -i mylab.pem remoteuser@remotehost
[remoteuser@remotehost ~]$

[user@host ~]$ ssh -i mylab.pem remoteuser@remotehost




#permission 
chmod 600 mylab.pem 

Close the connection = Ctrl+D




#shortcut
Superkey+M = message tray

Ctrl+Alt+LeftArrow or Ctrl+Alt+RightArrow = switch between workspace 

Super+L (which might be easier to remember as Windows+L) = lock screen 

on-screen keyboard treats as modifier keys (like Super) are Shift, Ctrl, Alt, and Caps. The Esc and Menu keys are treated like normal keys and not modifier keys.



