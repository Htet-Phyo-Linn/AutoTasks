#Red Hat System Administration Part II

##Should Know
true = 0
false = 1

you can run any path = ~/bin/test.sh

##Bash Essentials

which 
echo @PATH

first line -> #!/usr/bin/bash
comment -> echo # not a comment #

using variable -> var=$(hostname -s); echo $var
				-> echo "***** hostname is ${var} *****"
				-> echo Your username variable is \$USER.
				-> echo "Will variable $var evaluate to $(hostname -s)?"
				-> echo "\"Hello, world\""



## Loop format

for VARIABLE in LIST; do
COMMAND VARIABLE
done



### Different type or usage
for HOST in host1 host2 host3; do echo $HOST; done

for HOST in host{1,2,3}; do echo $HOST; done

for HOST in host{1..3}; do echo $HOST; done

for FILE in file{a..c}; do ls $FILE; done

for EVEN in $(seq 2 2 10); do echo "$EVEN"; done



#### Specical Case
for PACKAGE in $(rpm -qa | grep kernel); \
do echo "$PACKAGE was installed on \
$(date -d @$(rpm -q --qf "%{INSTALLTIME}\n" $PACKAGE))"; done


### Exit code
echo $?



## Operator

less than = lt
greater than = gt
less than equal = le
greater than equal = ge 

zero length = z
non-zero length = n

file test = -f
directory = -d
symbollic link = -l
read permissions = -r


### Example 
[[ 8 -gt 2 ]]; echo $?

[[ abc != def ]]; echo $?

STRING='abc'; [[ -n "$STRING" ]]; echo $?



## Conditional Structures

if <CONDITION>; then
      <STATEMENT>
      ...
      <STATEMENT>
fi



if <CONDITION>; then
      <STATEMENT>
      ...
      <STATEMENT>
elif <CONDITION>; then
      <STATEMENT>
      ...
      <STATEMENT>
else
      <STATEMENT>
      ...
      <STATEMENT>
fi



### Example

{

systemctl is-active psacct > /dev/null 2>&1

if  [[ $? -ne 0 ]]; then
	sudo systemctl start psacct;
else
	sudo systemctl stop psacct;
fi

}


Note
	This script indeed checks the exit status of the previous command using $?. If the exit status is not equal to 0 (i.e., it's nonzero), it starts the psacct service. If the exit status is equal to 0, it stops the psacct service. This is a common way to conditionally execute commands based on the success or failure of a previous command.



{

#!/bin/bash

# Check if MariaDB is active
systemctl is-active mariadb > /dev/null 2>&1
MARIADB_ACTIVE=$?

# Check if PostgreSQL is active
systemctl is-active postgresql > /dev/null 2>&1
POSTGRESQL_ACTIVE=$?

# Determine which database command to run based on the active status
if [[ "$MARIADB_ACTIVE" -eq 0 ]]; then
    mysql
elif [[ "$POSTGRESQL_ACTIVE" -eq 0 ]]; then
    psql
else
    sqlite3
fi

}
